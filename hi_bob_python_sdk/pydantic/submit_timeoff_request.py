# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class SubmitTimeoffRequest(BaseModel):
    # Request policy type, e.g. Holiday, Sick or any custom type defined.
    policy_type: str = Field(alias='policyType')

    # Date of the first day of the time off (not relevant for requests using the hours type).
    start_date: date = Field(alias='startDate')

    # Request reason.
    description: typing.Optional[str] = Field(None, alias='description')

    # The type of request duration.<br> Select <b>hours</b> when the request is for X hours during the day requested (This is supported only for policy types measured in hours).<br> Select <b>portionOnRange</b> when the  request is for every morning or every afternoon during the days requested.<br> Select <b>hoursOnRange</b> when the request is for X hours every day during the days requested (This is supported only for policy types measured in hours)
    request_range_type: typing.Optional[Literal["days", "hours", "portionOnRange", "hoursOnRange"]] = Field(None, alias='requestRangeType')

    # Portion of the first day - relevant for requests in days.
    start_date_portion: typing.Optional[Literal["all_day", "morning", "afternoon"]] = Field(None, alias='startDatePortion')

    # Date of the last day of the time off (not relevant for requests using                                                the hours type).
    end_date: typing.Optional[date] = Field(None, alias='endDate')

    # This field is mandatory if the requestRangeType is set to 'hours'.
    hours: typing.Optional[int] = Field(None, alias='hours')

    # Relevant if requestRangeType is set to 'hours'.
    minutes: typing.Optional[int] = Field(None, alias='minutes')

    # Portion of the last day - relevant for requests in days.
    end_date_portion: typing.Optional[Literal["all_day", "morning", "afternoon"]] = Field(None, alias='endDatePortion')

    # Select <b>morning</b> when the request is for mornings on the days requested. Select <b>afternoon</b> when the request is for afternoons on the days requested.<br> This is mandatory if the <b>requestRangeType</b> is <b>portionOnRange</b>.
    day_portion: typing.Optional[Literal["morning", "afternoon"]] = Field(None, alias='dayPortion')

    # Enter the number of hours when the request is for X hours on the days requested.<br> This is mandatory if the <b>requestRangeType</b> is <b>hoursOnRange</b>.
    daily_hours: typing.Optional[int] = Field(None, alias='dailyHours')

    # Enter the number of minutes when the request is for X hours and X minutes on the days requested.<br> This is relevant if the <b>requestRangeType</b> is <b>hoursOnRange</b> and the amount requested is not a full hour or hours.
    daily_minutes: typing.Optional[int] = Field(None, alias='dailyMinutes')

    # Admins only can skip the approval policy. Setting this field to true will create an approved request.
    skip_manager_approval: typing.Optional[bool] = Field(None, alias='skipManagerApproval')

    # The employee ID of the user to be set as the approver for this request. This is relevant if 'skipManagerApproval' is set to true.<br>Please note that the user calling the API with this param must have permission to import time off requests.
    approver: typing.Optional[str] = Field(None, alias='approver')

    # The reason code ID taken from the policy type's reason codes list. The list is available in GET /timeoff/policy-types/{policyType}/reason-codes
    reason_code: typing.Optional[int] = Field(None, alias='reasonCode')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
