# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class TimeoffChange(BaseModel):
    # Change type - created, canceled or deleted.
    change_type: typing.Optional[Literal["Created", "Canceled", "Deleted"]] = Field(None, alias='changeType')

    # Employee ID
    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    # Employee display name.
    employee_display_name: typing.Optional[str] = Field(None, alias='employeeDisplayName')

    # Employee email address.
    employee_email: typing.Optional[str] = Field(None, alias='employeeEmail')

    # TimeOff Request ID.
    request_id: typing.Optional[int] = Field(None, alias='requestId')

    # Display name of the policy type.
    policy_type_display_name: typing.Optional[str] = Field(None, alias='policyTypeDisplayName')

    # The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.
    type: typing.Optional[Literal["days", "hours", "portionOnRange", "hoursOnRange"]] = Field(None, alias='type')

    # Date of the first day of the time off (not relevant for requests using the hours type).
    start_date: typing.Optional[date] = Field(None, alias='startDate')

    # What portion of the first day is included - all_day, morning or afternoon (relevant for requests using the Days type).
    start_portion: typing.Optional[str] = Field(None, alias='startPortion')

    # Date of the last day of the time off (not relevant for requests using the hours type).
    end_date: typing.Optional[date] = Field(None, alias='endDate')

    # What portion of the last day is included - all_day, morning or afternoon (relevant for requests using the Days type).
    end_portion: typing.Optional[str] = Field(None, alias='endPortion')

    # What portion of the request's days is included - morning or afternoon (relevant for requests using the portionOnRange type).
    day_portion: typing.Optional[str] = Field(None, alias='dayPortion')

    # Date of the time off (relevant for requests using the Hours type)
    date: typing.Optional[date] = Field(None, alias='date')

    # The time off duration in hours for the date (relevant for requests using the Hours type).
    hours_on_date: typing.Optional[int] = Field(None, alias='hoursOnDate')

    # The time off duration in hours for every day in the request (relevant for requests using the hoursOnRange type)
    daily_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='dailyHours')

    # The unit used for the totalDuration and totalCost - either 'days' or 'hours'
    duration_unit: typing.Optional[Literal["days", "hours"]] = Field(None, alias='durationUnit')

    # The total amount of time the request covers, including regular days off such as weekends
    total_duration: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalDuration')

    # The amount that will be deducted from the balance
    total_cost: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalCost')

    # Request change reason
    change_reason: typing.Optional[str] = Field(None, alias='changeReason')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
