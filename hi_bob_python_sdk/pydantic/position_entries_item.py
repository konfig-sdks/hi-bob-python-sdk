# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PositionEntriesItem(BaseModel):
    # The position's full time equivalent (FTE%).
    /position/fte_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/fte')

    # The date this position becomes effective.
    /position/effective_date_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/effectiveDate')

    # The position's employment type.
    /position/employment_type_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/employmentType')

    # The position's status.
    /position/status_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/status')

    # The employee's assignment date for this position.
    /position/actual_start_date_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/actualStartDate')

    # Reason for changing or creating this position.
    /position/reason_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/reason')

    # The position's type.
    /position/position_type_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/positionType')

    # The current assigned employee for this position.
    /position/filled_by_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/filledBy')

    # The position's job.
    /position/job_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/job')

    # The position's recruitment status.
    /position/recruitment_status_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/recruitmentStatus')

    # The unique ID of this position.
    /position/name_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/name')

    # The position's department.
    /position/department_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/department')

    # The position's site.
    /position/site_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/site')

    # The expected date this position should be filled.
    /position/expected_start_date_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/expectedStartDate')

    # The manager's position ID.
    /position/manager_position_id_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/managerPositionId')

    # The current assigned manager for this position.
    /position/manager_position_filled_by_: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='/position/managerPositionFilledBy')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
