# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING


RequiredPositionEntriesItem = TypedDict("RequiredPositionEntriesItem", {
    })

OptionalPositionEntriesItem = TypedDict("OptionalPositionEntriesItem", {
    # The position's full time equivalent (FTE%).
    "/position/fte": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The date this position becomes effective.
    "/position/effectiveDate": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's employment type.
    "/position/employmentType": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's status.
    "/position/status": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The employee's assignment date for this position.
    "/position/actualStartDate": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # Reason for changing or creating this position.
    "/position/reason": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's type.
    "/position/positionType": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The current assigned employee for this position.
    "/position/filledBy": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's job.
    "/position/job": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's recruitment status.
    "/position/recruitmentStatus": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The unique ID of this position.
    "/position/name": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's department.
    "/position/department": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The position's site.
    "/position/site": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The expected date this position should be filled.
    "/position/expectedStartDate": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The manager's position ID.
    "/position/managerPositionId": typing.Union[bool, date, datetime, dict, float, int, list, str, None],

    # The current assigned manager for this position.
    "/position/managerPositionFilledBy": typing.Union[bool, date, datetime, dict, float, int, list, str, None],
    }, total=False)

class PositionEntriesItem(RequiredPositionEntriesItem, OptionalPositionEntriesItem):
    pass
