# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class SubmitTimeoffRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "policyType",
            "startDate",
        }
        
        class properties:
            policyType = schemas.StrSchema
            startDate = schemas.DateSchema
            description = schemas.StrSchema
            
            
            class requestRangeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "days": "DAYS",
                        "hours": "HOURS",
                        "portionOnRange": "PORTION_ON_RANGE",
                        "hoursOnRange": "HOURS_ON_RANGE",
                    }
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
                
                @schemas.classproperty
                def PORTION_ON_RANGE(cls):
                    return cls("portionOnRange")
                
                @schemas.classproperty
                def HOURS_ON_RANGE(cls):
                    return cls("hoursOnRange")
            
            
            class startDatePortion(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "all_day": "ALL_DAY",
                        "morning": "MORNING",
                        "afternoon": "AFTERNOON",
                    }
                
                @schemas.classproperty
                def ALL_DAY(cls):
                    return cls("all_day")
                
                @schemas.classproperty
                def MORNING(cls):
                    return cls("morning")
                
                @schemas.classproperty
                def AFTERNOON(cls):
                    return cls("afternoon")
            endDate = schemas.DateSchema
            hours = schemas.IntSchema
            minutes = schemas.IntSchema
            
            
            class endDatePortion(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "all_day": "ALL_DAY",
                        "morning": "MORNING",
                        "afternoon": "AFTERNOON",
                    }
                
                @schemas.classproperty
                def ALL_DAY(cls):
                    return cls("all_day")
                
                @schemas.classproperty
                def MORNING(cls):
                    return cls("morning")
                
                @schemas.classproperty
                def AFTERNOON(cls):
                    return cls("afternoon")
            
            
            class dayPortion(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "morning": "MORNING",
                        "afternoon": "AFTERNOON",
                    }
                
                @schemas.classproperty
                def MORNING(cls):
                    return cls("morning")
                
                @schemas.classproperty
                def AFTERNOON(cls):
                    return cls("afternoon")
            dailyHours = schemas.IntSchema
            dailyMinutes = schemas.IntSchema
            skipManagerApproval = schemas.BoolSchema
            approver = schemas.StrSchema
            reasonCode = schemas.IntSchema
            __annotations__ = {
                "policyType": policyType,
                "startDate": startDate,
                "description": description,
                "requestRangeType": requestRangeType,
                "startDatePortion": startDatePortion,
                "endDate": endDate,
                "hours": hours,
                "minutes": minutes,
                "endDatePortion": endDatePortion,
                "dayPortion": dayPortion,
                "dailyHours": dailyHours,
                "dailyMinutes": dailyMinutes,
                "skipManagerApproval": skipManagerApproval,
                "approver": approver,
                "reasonCode": reasonCode,
            }
    
    policyType: MetaOapg.properties.policyType
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyType"]) -> MetaOapg.properties.policyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestRangeType"]) -> MetaOapg.properties.requestRangeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDatePortion"]) -> MetaOapg.properties.startDatePortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> MetaOapg.properties.minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDatePortion"]) -> MetaOapg.properties.endDatePortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayPortion"]) -> MetaOapg.properties.dayPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyHours"]) -> MetaOapg.properties.dailyHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyMinutes"]) -> MetaOapg.properties.dailyMinutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skipManagerApproval"]) -> MetaOapg.properties.skipManagerApproval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approver"]) -> MetaOapg.properties.approver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonCode"]) -> MetaOapg.properties.reasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policyType", "startDate", "description", "requestRangeType", "startDatePortion", "endDate", "hours", "minutes", "endDatePortion", "dayPortion", "dailyHours", "dailyMinutes", "skipManagerApproval", "approver", "reasonCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyType"]) -> MetaOapg.properties.policyType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestRangeType"]) -> typing.Union[MetaOapg.properties.requestRangeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDatePortion"]) -> typing.Union[MetaOapg.properties.startDatePortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union[MetaOapg.properties.minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDatePortion"]) -> typing.Union[MetaOapg.properties.endDatePortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayPortion"]) -> typing.Union[MetaOapg.properties.dayPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyHours"]) -> typing.Union[MetaOapg.properties.dailyHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyMinutes"]) -> typing.Union[MetaOapg.properties.dailyMinutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skipManagerApproval"]) -> typing.Union[MetaOapg.properties.skipManagerApproval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approver"]) -> typing.Union[MetaOapg.properties.approver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonCode"]) -> typing.Union[MetaOapg.properties.reasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policyType", "startDate", "description", "requestRangeType", "startDatePortion", "endDate", "hours", "minutes", "endDatePortion", "dayPortion", "dailyHours", "dailyMinutes", "skipManagerApproval", "approver", "reasonCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        policyType: typing.Union[MetaOapg.properties.policyType, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        requestRangeType: typing.Union[MetaOapg.properties.requestRangeType, str, schemas.Unset] = schemas.unset,
        startDatePortion: typing.Union[MetaOapg.properties.startDatePortion, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minutes: typing.Union[MetaOapg.properties.minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endDatePortion: typing.Union[MetaOapg.properties.endDatePortion, str, schemas.Unset] = schemas.unset,
        dayPortion: typing.Union[MetaOapg.properties.dayPortion, str, schemas.Unset] = schemas.unset,
        dailyHours: typing.Union[MetaOapg.properties.dailyHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dailyMinutes: typing.Union[MetaOapg.properties.dailyMinutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skipManagerApproval: typing.Union[MetaOapg.properties.skipManagerApproval, bool, schemas.Unset] = schemas.unset,
        approver: typing.Union[MetaOapg.properties.approver, str, schemas.Unset] = schemas.unset,
        reasonCode: typing.Union[MetaOapg.properties.reasonCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubmitTimeoffRequest':
        return super().__new__(
            cls,
            *args,
            policyType=policyType,
            startDate=startDate,
            description=description,
            requestRangeType=requestRangeType,
            startDatePortion=startDatePortion,
            endDate=endDate,
            hours=hours,
            minutes=minutes,
            endDatePortion=endDatePortion,
            dayPortion=dayPortion,
            dailyHours=dailyHours,
            dailyMinutes=dailyMinutes,
            skipManagerApproval=skipManagerApproval,
            approver=approver,
            reasonCode=reasonCode,
            _configuration=_configuration,
            **kwargs,
        )
