# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class PolicyType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class activity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "paidTimeoff": "PAID_TIMEOFF",
                        "unpaidTimeoff": "UNPAID_TIMEOFF",
                        "workTime": "WORK_TIME",
                    }
                
                @schemas.classproperty
                def PAID_TIMEOFF(cls):
                    return cls("paidTimeoff")
                
                @schemas.classproperty
                def UNPAID_TIMEOFF(cls):
                    return cls("unpaidTimeoff")
                
                @schemas.classproperty
                def WORK_TIME(cls):
                    return cls("workTime")
            bookingWorkDaysOnly = schemas.BoolSchema
            
            
            class unit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "days": "DAYS",
                        "hours": "HOURS",
                    }
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
            __annotations__ = {
                "name": name,
                "activity": activity,
                "bookingWorkDaysOnly": bookingWorkDaysOnly,
                "unit": unit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activity"]) -> MetaOapg.properties.activity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookingWorkDaysOnly"]) -> MetaOapg.properties.bookingWorkDaysOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "activity", "bookingWorkDaysOnly", "unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activity"]) -> typing.Union[MetaOapg.properties.activity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookingWorkDaysOnly"]) -> typing.Union[MetaOapg.properties.bookingWorkDaysOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "activity", "bookingWorkDaysOnly", "unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        activity: typing.Union[MetaOapg.properties.activity, str, schemas.Unset] = schemas.unset,
        bookingWorkDaysOnly: typing.Union[MetaOapg.properties.bookingWorkDaysOnly, bool, schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicyType':
        return super().__new__(
            cls,
            *args,
            name=name,
            activity=activity,
            bookingWorkDaysOnly=bookingWorkDaysOnly,
            unit=unit,
            _configuration=_configuration,
            **kwargs,
        )
