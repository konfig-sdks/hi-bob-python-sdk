# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class WorkEntry(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        all_of_1 = schemas.DictSchema
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    title = schemas.StrSchema
                    department = schemas.StrSchema
                    site = schemas.StrSchema
                    siteId = schemas.IntSchema
                    
                    
                    class reportsTo(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "id",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                firstName = schemas.StrSchema
                                surname = schemas.StrSchema
                                email = schemas.StrSchema
                                displayName = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "firstName": firstName,
                                    "surname": surname,
                                    "email": email,
                                    "displayName": displayName,
                                }
                        
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "firstName", "surname", "email", "displayName", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> typing.Union[MetaOapg.properties.surname, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "firstName", "surname", "email", "displayName", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                            surname: typing.Union[MetaOapg.properties.surname, str, schemas.Unset] = schemas.unset,
                            email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                            displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'reportsTo':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                firstName=firstName,
                                surname=surname,
                                email=email,
                                displayName=displayName,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    effectiveDate = schemas.DateSchema
                    customColumns = schemas.DictSchema
                    __annotations__ = {
                        "title": title,
                        "department": department,
                        "site": site,
                        "siteId": siteId,
                        "reportsTo": reportsTo,
                        "effectiveDate": effectiveDate,
                        "customColumns": customColumns,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["site"]) -> MetaOapg.properties.site: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["siteId"]) -> MetaOapg.properties.siteId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["reportsTo"]) -> MetaOapg.properties.reportsTo: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["customColumns"]) -> MetaOapg.properties.customColumns: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "department", "site", "siteId", "reportsTo", "effectiveDate", "customColumns", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["site"]) -> typing.Union[MetaOapg.properties.site, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["siteId"]) -> typing.Union[MetaOapg.properties.siteId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["reportsTo"]) -> typing.Union[MetaOapg.properties.reportsTo, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["customColumns"]) -> typing.Union[MetaOapg.properties.customColumns, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "department", "site", "siteId", "reportsTo", "effectiveDate", "customColumns", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                department: typing.Union[MetaOapg.properties.department, str, schemas.Unset] = schemas.unset,
                site: typing.Union[MetaOapg.properties.site, str, schemas.Unset] = schemas.unset,
                siteId: typing.Union[MetaOapg.properties.siteId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                reportsTo: typing.Union[MetaOapg.properties.reportsTo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, date, schemas.Unset] = schemas.unset,
                customColumns: typing.Union[MetaOapg.properties.customColumns, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    title=title,
                    department=department,
                    site=site,
                    siteId=siteId,
                    reportsTo=reportsTo,
                    effectiveDate=effectiveDate,
                    customColumns=customColumns,
                    _configuration=_configuration,
                    **kwargs,
                )
        all_of_3 = schemas.DictSchema
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TableEntry,
                cls.all_of_1,
                cls.all_of_2,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkEntry':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from hi_bob_python_sdk.model.table_entry import TableEntry
