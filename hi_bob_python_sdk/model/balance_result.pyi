# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class BalanceResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            totalBalanceAsOfDate = schemas.NumberSchema
            totalRoundedBalanceAsOfDate = schemas.NumberSchema
            pointInTime = schemas.DateSchema
            startingBalance = schemas.NumberSchema
            startingBalanceAsOf = schemas.DateSchema
            totalTaken = schemas.NumberSchema
            totalAdminAdjustments = schemas.NumberSchema
            totalSystemAdjustments = schemas.NumberSchema
            annualAllowance = schemas.NumberSchema
            policy = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "totalBalanceAsOfDate": totalBalanceAsOfDate,
                "totalRoundedBalanceAsOfDate": totalRoundedBalanceAsOfDate,
                "pointInTime": pointInTime,
                "startingBalance": startingBalance,
                "startingBalanceAsOf": startingBalanceAsOf,
                "totalTaken": totalTaken,
                "totalAdminAdjustments": totalAdminAdjustments,
                "totalSystemAdjustments": totalSystemAdjustments,
                "annualAllowance": annualAllowance,
                "policy": policy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalBalanceAsOfDate"]) -> MetaOapg.properties.totalBalanceAsOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRoundedBalanceAsOfDate"]) -> MetaOapg.properties.totalRoundedBalanceAsOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pointInTime"]) -> MetaOapg.properties.pointInTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startingBalance"]) -> MetaOapg.properties.startingBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startingBalanceAsOf"]) -> MetaOapg.properties.startingBalanceAsOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalTaken"]) -> MetaOapg.properties.totalTaken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAdminAdjustments"]) -> MetaOapg.properties.totalAdminAdjustments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalSystemAdjustments"]) -> MetaOapg.properties.totalSystemAdjustments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualAllowance"]) -> MetaOapg.properties.annualAllowance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy"]) -> MetaOapg.properties.policy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "totalBalanceAsOfDate", "totalRoundedBalanceAsOfDate", "pointInTime", "startingBalance", "startingBalanceAsOf", "totalTaken", "totalAdminAdjustments", "totalSystemAdjustments", "annualAllowance", "policy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalBalanceAsOfDate"]) -> typing.Union[MetaOapg.properties.totalBalanceAsOfDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRoundedBalanceAsOfDate"]) -> typing.Union[MetaOapg.properties.totalRoundedBalanceAsOfDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pointInTime"]) -> typing.Union[MetaOapg.properties.pointInTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startingBalance"]) -> typing.Union[MetaOapg.properties.startingBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startingBalanceAsOf"]) -> typing.Union[MetaOapg.properties.startingBalanceAsOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalTaken"]) -> typing.Union[MetaOapg.properties.totalTaken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAdminAdjustments"]) -> typing.Union[MetaOapg.properties.totalAdminAdjustments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalSystemAdjustments"]) -> typing.Union[MetaOapg.properties.totalSystemAdjustments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualAllowance"]) -> typing.Union[MetaOapg.properties.annualAllowance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union[MetaOapg.properties.policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "totalBalanceAsOfDate", "totalRoundedBalanceAsOfDate", "pointInTime", "startingBalance", "startingBalanceAsOf", "totalTaken", "totalAdminAdjustments", "totalSystemAdjustments", "annualAllowance", "policy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        totalBalanceAsOfDate: typing.Union[MetaOapg.properties.totalBalanceAsOfDate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalRoundedBalanceAsOfDate: typing.Union[MetaOapg.properties.totalRoundedBalanceAsOfDate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pointInTime: typing.Union[MetaOapg.properties.pointInTime, str, date, schemas.Unset] = schemas.unset,
        startingBalance: typing.Union[MetaOapg.properties.startingBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        startingBalanceAsOf: typing.Union[MetaOapg.properties.startingBalanceAsOf, str, date, schemas.Unset] = schemas.unset,
        totalTaken: typing.Union[MetaOapg.properties.totalTaken, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalAdminAdjustments: typing.Union[MetaOapg.properties.totalAdminAdjustments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalSystemAdjustments: typing.Union[MetaOapg.properties.totalSystemAdjustments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        annualAllowance: typing.Union[MetaOapg.properties.annualAllowance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        policy: typing.Union[MetaOapg.properties.policy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BalanceResult':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            totalBalanceAsOfDate=totalBalanceAsOfDate,
            totalRoundedBalanceAsOfDate=totalRoundedBalanceAsOfDate,
            pointInTime=pointInTime,
            startingBalance=startingBalance,
            startingBalanceAsOf=startingBalanceAsOf,
            totalTaken=totalTaken,
            totalAdminAdjustments=totalAdminAdjustments,
            totalSystemAdjustments=totalSystemAdjustments,
            annualAllowance=annualAllowance,
            policy=policy,
            _configuration=_configuration,
            **kwargs,
        )
