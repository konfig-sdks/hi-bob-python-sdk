# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class AdjustmentRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class adjustmentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BALANCE(cls):
                    return cls("balance")
                
                @schemas.classproperty
                def DAYS_USED(cls):
                    return cls("daysUsed")
            policyType = schemas.StrSchema
            effectiveDate = schemas.DateSchema
            amount = schemas.NumberSchema
            reason = schemas.StrSchema
            __annotations__ = {
                "adjustmentType": adjustmentType,
                "policyType": policyType,
                "effectiveDate": effectiveDate,
                "amount": amount,
                "reason": reason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustmentType"]) -> MetaOapg.properties.adjustmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyType"]) -> MetaOapg.properties.policyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adjustmentType", "policyType", "effectiveDate", "amount", "reason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustmentType"]) -> typing.Union[MetaOapg.properties.adjustmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyType"]) -> typing.Union[MetaOapg.properties.policyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adjustmentType", "policyType", "effectiveDate", "amount", "reason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        adjustmentType: typing.Union[MetaOapg.properties.adjustmentType, str, schemas.Unset] = schemas.unset,
        policyType: typing.Union[MetaOapg.properties.policyType, str, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, date, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdjustmentRequest':
        return super().__new__(
            cls,
            *args,
            adjustmentType=adjustmentType,
            policyType=policyType,
            effectiveDate=effectiveDate,
            amount=amount,
            reason=reason,
            _configuration=_configuration,
            **kwargs,
        )
