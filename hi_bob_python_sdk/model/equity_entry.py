# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class EquityEntry(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "quantity",
            "equityType",
        }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    quantity = schemas.Float64Schema
                    equityType = schemas.StrSchema
                    vestingCommencementDate = schemas.DateSchema
                    consentNumber = schemas.StrSchema
                    grantDate = schemas.DateSchema
                    optionExpiration = schemas.DateSchema
                
                    @staticmethod
                    def exercisePrice() -> typing.Type['CurrencyValue']:
                        return CurrencyValue
                    vestingTerm = schemas.StrSchema
                    grantType = schemas.StrSchema
                    vestingSchedule = schemas.NumberSchema
                    grantNumber = schemas.Float64Schema
                    grantStatus = schemas.StrSchema
                    __annotations__ = {
                        "quantity": quantity,
                        "equityType": equityType,
                        "vestingCommencementDate": vestingCommencementDate,
                        "consentNumber": consentNumber,
                        "grantDate": grantDate,
                        "optionExpiration": optionExpiration,
                        "exercisePrice": exercisePrice,
                        "vestingTerm": vestingTerm,
                        "grantType": grantType,
                        "vestingSchedule": vestingSchedule,
                        "grantNumber": grantNumber,
                        "grantStatus": grantStatus,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["equityType"]) -> MetaOapg.properties.equityType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vestingCommencementDate"]) -> MetaOapg.properties.vestingCommencementDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["consentNumber"]) -> MetaOapg.properties.consentNumber: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grantDate"]) -> MetaOapg.properties.grantDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["optionExpiration"]) -> MetaOapg.properties.optionExpiration: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exercisePrice"]) -> 'CurrencyValue': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vestingTerm"]) -> MetaOapg.properties.vestingTerm: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grantType"]) -> MetaOapg.properties.grantType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vestingSchedule"]) -> MetaOapg.properties.vestingSchedule: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grantNumber"]) -> MetaOapg.properties.grantNumber: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grantStatus"]) -> MetaOapg.properties.grantStatus: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["quantity", "equityType", "vestingCommencementDate", "consentNumber", "grantDate", "optionExpiration", "exercisePrice", "vestingTerm", "grantType", "vestingSchedule", "grantNumber", "grantStatus", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["equityType"]) -> typing.Union[MetaOapg.properties.equityType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vestingCommencementDate"]) -> typing.Union[MetaOapg.properties.vestingCommencementDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["consentNumber"]) -> typing.Union[MetaOapg.properties.consentNumber, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grantDate"]) -> typing.Union[MetaOapg.properties.grantDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["optionExpiration"]) -> typing.Union[MetaOapg.properties.optionExpiration, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exercisePrice"]) -> typing.Union['CurrencyValue', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vestingTerm"]) -> typing.Union[MetaOapg.properties.vestingTerm, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grantType"]) -> typing.Union[MetaOapg.properties.grantType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vestingSchedule"]) -> typing.Union[MetaOapg.properties.vestingSchedule, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grantNumber"]) -> typing.Union[MetaOapg.properties.grantNumber, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grantStatus"]) -> typing.Union[MetaOapg.properties.grantStatus, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["quantity", "equityType", "vestingCommencementDate", "consentNumber", "grantDate", "optionExpiration", "exercisePrice", "vestingTerm", "grantType", "vestingSchedule", "grantNumber", "grantStatus", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                equityType: typing.Union[MetaOapg.properties.equityType, str, schemas.Unset] = schemas.unset,
                vestingCommencementDate: typing.Union[MetaOapg.properties.vestingCommencementDate, str, date, schemas.Unset] = schemas.unset,
                consentNumber: typing.Union[MetaOapg.properties.consentNumber, str, schemas.Unset] = schemas.unset,
                grantDate: typing.Union[MetaOapg.properties.grantDate, str, date, schemas.Unset] = schemas.unset,
                optionExpiration: typing.Union[MetaOapg.properties.optionExpiration, str, date, schemas.Unset] = schemas.unset,
                exercisePrice: typing.Union['CurrencyValue', schemas.Unset] = schemas.unset,
                vestingTerm: typing.Union[MetaOapg.properties.vestingTerm, str, schemas.Unset] = schemas.unset,
                grantType: typing.Union[MetaOapg.properties.grantType, str, schemas.Unset] = schemas.unset,
                vestingSchedule: typing.Union[MetaOapg.properties.vestingSchedule, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                grantNumber: typing.Union[MetaOapg.properties.grantNumber, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                grantStatus: typing.Union[MetaOapg.properties.grantStatus, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    quantity=quantity,
                    equityType=equityType,
                    vestingCommencementDate=vestingCommencementDate,
                    consentNumber=consentNumber,
                    grantDate=grantDate,
                    optionExpiration=optionExpiration,
                    exercisePrice=exercisePrice,
                    vestingTerm=vestingTerm,
                    grantType=grantType,
                    vestingSchedule=vestingSchedule,
                    grantNumber=grantNumber,
                    grantStatus=grantStatus,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TableEntry,
                cls.all_of_1,
            ]

    
    quantity: schemas.AnyTypeSchema
    equityType: schemas.AnyTypeSchema

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EquityEntry':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from hi_bob_python_sdk.model.currency_value import CurrencyValue
from hi_bob_python_sdk.model.table_entry import TableEntry
