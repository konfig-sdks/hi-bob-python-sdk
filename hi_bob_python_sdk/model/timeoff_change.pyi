# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class TimeoffChange(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class changeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATED(cls):
                    return cls("Created")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("Canceled")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("Deleted")
            employeeId = schemas.UUIDSchema
            employeeDisplayName = schemas.StrSchema
            employeeEmail = schemas.StrSchema
            requestId = schemas.IntSchema
            policyTypeDisplayName = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
                
                @schemas.classproperty
                def PORTION_ON_RANGE(cls):
                    return cls("portionOnRange")
                
                @schemas.classproperty
                def HOURS_ON_RANGE(cls):
                    return cls("hoursOnRange")
            startDate = schemas.DateSchema
            startPortion = schemas.StrSchema
            endDate = schemas.DateSchema
            endPortion = schemas.StrSchema
            dayPortion = schemas.StrSchema
            date = schemas.DateSchema
            hoursOnDate = schemas.IntSchema
            dailyHours = schemas.NumberSchema
            
            
            class durationUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
            totalDuration = schemas.NumberSchema
            totalCost = schemas.NumberSchema
            changeReason = schemas.StrSchema
            __annotations__ = {
                "changeType": changeType,
                "employeeId": employeeId,
                "employeeDisplayName": employeeDisplayName,
                "employeeEmail": employeeEmail,
                "requestId": requestId,
                "policyTypeDisplayName": policyTypeDisplayName,
                "type": type,
                "startDate": startDate,
                "startPortion": startPortion,
                "endDate": endDate,
                "endPortion": endPortion,
                "dayPortion": dayPortion,
                "date": date,
                "hoursOnDate": hoursOnDate,
                "dailyHours": dailyHours,
                "durationUnit": durationUnit,
                "totalDuration": totalDuration,
                "totalCost": totalCost,
                "changeReason": changeReason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeType"]) -> MetaOapg.properties.changeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeDisplayName"]) -> MetaOapg.properties.employeeDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeEmail"]) -> MetaOapg.properties.employeeEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyTypeDisplayName"]) -> MetaOapg.properties.policyTypeDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startPortion"]) -> MetaOapg.properties.startPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endPortion"]) -> MetaOapg.properties.endPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayPortion"]) -> MetaOapg.properties.dayPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursOnDate"]) -> MetaOapg.properties.hoursOnDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyHours"]) -> MetaOapg.properties.dailyHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationUnit"]) -> MetaOapg.properties.durationUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDuration"]) -> MetaOapg.properties.totalDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["changeType", "employeeId", "employeeDisplayName", "employeeEmail", "requestId", "policyTypeDisplayName", "type", "startDate", "startPortion", "endDate", "endPortion", "dayPortion", "date", "hoursOnDate", "dailyHours", "durationUnit", "totalDuration", "totalCost", "changeReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeType"]) -> typing.Union[MetaOapg.properties.changeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeDisplayName"]) -> typing.Union[MetaOapg.properties.employeeDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeEmail"]) -> typing.Union[MetaOapg.properties.employeeEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> typing.Union[MetaOapg.properties.requestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyTypeDisplayName"]) -> typing.Union[MetaOapg.properties.policyTypeDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startPortion"]) -> typing.Union[MetaOapg.properties.startPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endPortion"]) -> typing.Union[MetaOapg.properties.endPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayPortion"]) -> typing.Union[MetaOapg.properties.dayPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursOnDate"]) -> typing.Union[MetaOapg.properties.hoursOnDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyHours"]) -> typing.Union[MetaOapg.properties.dailyHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationUnit"]) -> typing.Union[MetaOapg.properties.durationUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDuration"]) -> typing.Union[MetaOapg.properties.totalDuration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCost"]) -> typing.Union[MetaOapg.properties.totalCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["changeType", "employeeId", "employeeDisplayName", "employeeEmail", "requestId", "policyTypeDisplayName", "type", "startDate", "startPortion", "endDate", "endPortion", "dayPortion", "date", "hoursOnDate", "dailyHours", "durationUnit", "totalDuration", "totalCost", "changeReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        changeType: typing.Union[MetaOapg.properties.changeType, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        employeeDisplayName: typing.Union[MetaOapg.properties.employeeDisplayName, str, schemas.Unset] = schemas.unset,
        employeeEmail: typing.Union[MetaOapg.properties.employeeEmail, str, schemas.Unset] = schemas.unset,
        requestId: typing.Union[MetaOapg.properties.requestId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        policyTypeDisplayName: typing.Union[MetaOapg.properties.policyTypeDisplayName, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        startPortion: typing.Union[MetaOapg.properties.startPortion, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        endPortion: typing.Union[MetaOapg.properties.endPortion, str, schemas.Unset] = schemas.unset,
        dayPortion: typing.Union[MetaOapg.properties.dayPortion, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        hoursOnDate: typing.Union[MetaOapg.properties.hoursOnDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dailyHours: typing.Union[MetaOapg.properties.dailyHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        durationUnit: typing.Union[MetaOapg.properties.durationUnit, str, schemas.Unset] = schemas.unset,
        totalDuration: typing.Union[MetaOapg.properties.totalDuration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalCost: typing.Union[MetaOapg.properties.totalCost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        changeReason: typing.Union[MetaOapg.properties.changeReason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeoffChange':
        return super().__new__(
            cls,
            *args,
            changeType=changeType,
            employeeId=employeeId,
            employeeDisplayName=employeeDisplayName,
            employeeEmail=employeeEmail,
            requestId=requestId,
            policyTypeDisplayName=policyTypeDisplayName,
            type=type,
            startDate=startDate,
            startPortion=startPortion,
            endDate=endDate,
            endPortion=endPortion,
            dayPortion=dayPortion,
            date=date,
            hoursOnDate=hoursOnDate,
            dailyHours=dailyHours,
            durationUnit=durationUnit,
            totalDuration=totalDuration,
            totalCost=totalCost,
            changeReason=changeReason,
            _configuration=_configuration,
            **kwargs,
        )
