# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class Policy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            name = schemas.StrSchema
            allowance = schemas.NumberSchema
            maxBalance = schemas.NumberSchema
            minBalance = schemas.NumberSchema
            
            
            class yosIncrease(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['YearsOfServiceIncrements']:
                        return YearsOfServiceIncrements
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['YearsOfServiceIncrements'], typing.List['YearsOfServiceIncrements']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'yosIncrease':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'YearsOfServiceIncrements':
                    return super().__getitem__(i)
            
            
            class minTimeOffRequestDuration(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FULL_DAY(cls):
                    return cls("fullDay")
                
                @schemas.classproperty
                def HALF_DAY(cls):
                    return cls("halfDay")
                
                @schemas.classproperty
                def FULL_HOUR(cls):
                    return cls("fullHour")
                
                @schemas.classproperty
                def HALF_HOUR(cls):
                    return cls("halfHour")
                
                @schemas.classproperty
                def QUARTER_HOUR(cls):
                    return cls("quarterHour")
            approvalRequired = schemas.BoolSchema
            
            
            class unit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
            __annotations__ = {
                "description": description,
                "name": name,
                "allowance": allowance,
                "maxBalance": maxBalance,
                "minBalance": minBalance,
                "yosIncrease": yosIncrease,
                "minTimeOffRequestDuration": minTimeOffRequestDuration,
                "approvalRequired": approvalRequired,
                "unit": unit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowance"]) -> MetaOapg.properties.allowance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxBalance"]) -> MetaOapg.properties.maxBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minBalance"]) -> MetaOapg.properties.minBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yosIncrease"]) -> MetaOapg.properties.yosIncrease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minTimeOffRequestDuration"]) -> MetaOapg.properties.minTimeOffRequestDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalRequired"]) -> MetaOapg.properties.approvalRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "allowance", "maxBalance", "minBalance", "yosIncrease", "minTimeOffRequestDuration", "approvalRequired", "unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowance"]) -> typing.Union[MetaOapg.properties.allowance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxBalance"]) -> typing.Union[MetaOapg.properties.maxBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minBalance"]) -> typing.Union[MetaOapg.properties.minBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yosIncrease"]) -> typing.Union[MetaOapg.properties.yosIncrease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minTimeOffRequestDuration"]) -> typing.Union[MetaOapg.properties.minTimeOffRequestDuration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalRequired"]) -> typing.Union[MetaOapg.properties.approvalRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "allowance", "maxBalance", "minBalance", "yosIncrease", "minTimeOffRequestDuration", "approvalRequired", "unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        allowance: typing.Union[MetaOapg.properties.allowance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxBalance: typing.Union[MetaOapg.properties.maxBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minBalance: typing.Union[MetaOapg.properties.minBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yosIncrease: typing.Union[MetaOapg.properties.yosIncrease, list, tuple, schemas.Unset] = schemas.unset,
        minTimeOffRequestDuration: typing.Union[MetaOapg.properties.minTimeOffRequestDuration, str, schemas.Unset] = schemas.unset,
        approvalRequired: typing.Union[MetaOapg.properties.approvalRequired, bool, schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Policy':
        return super().__new__(
            cls,
            *args,
            description=description,
            name=name,
            allowance=allowance,
            maxBalance=maxBalance,
            minBalance=minBalance,
            yosIncrease=yosIncrease,
            minTimeOffRequestDuration=minTimeOffRequestDuration,
            approvalRequired=approvalRequired,
            unit=unit,
            _configuration=_configuration,
            **kwargs,
        )

from hi_bob_python_sdk.model.years_of_service_increments import YearsOfServiceIncrements
