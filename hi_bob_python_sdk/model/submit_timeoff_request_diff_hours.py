# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class SubmitTimeoffRequestDiffHours(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "endDate",
            "policyType",
            "durations",
            "startDate",
        }
        
        class properties:
            policyType = schemas.StrSchema
            startDate = schemas.DateSchema
            endDate = schemas.DateSchema
        
            @staticmethod
            def durations() -> typing.Type['SubmitTimeoffRequestDiffHoursDurations']:
                return SubmitTimeoffRequestDiffHoursDurations
            description = schemas.StrSchema
            skipManagerApproval = schemas.BoolSchema
            approver = schemas.StrSchema
            reasonCode = schemas.IntSchema
            __annotations__ = {
                "policyType": policyType,
                "startDate": startDate,
                "endDate": endDate,
                "durations": durations,
                "description": description,
                "skipManagerApproval": skipManagerApproval,
                "approver": approver,
                "reasonCode": reasonCode,
            }
    
    endDate: MetaOapg.properties.endDate
    policyType: MetaOapg.properties.policyType
    durations: 'SubmitTimeoffRequestDiffHoursDurations'
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyType"]) -> MetaOapg.properties.policyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durations"]) -> 'SubmitTimeoffRequestDiffHoursDurations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skipManagerApproval"]) -> MetaOapg.properties.skipManagerApproval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approver"]) -> MetaOapg.properties.approver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonCode"]) -> MetaOapg.properties.reasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policyType", "startDate", "endDate", "durations", "description", "skipManagerApproval", "approver", "reasonCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyType"]) -> MetaOapg.properties.policyType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durations"]) -> 'SubmitTimeoffRequestDiffHoursDurations': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skipManagerApproval"]) -> typing.Union[MetaOapg.properties.skipManagerApproval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approver"]) -> typing.Union[MetaOapg.properties.approver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonCode"]) -> typing.Union[MetaOapg.properties.reasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policyType", "startDate", "endDate", "durations", "description", "skipManagerApproval", "approver", "reasonCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, ],
        policyType: typing.Union[MetaOapg.properties.policyType, str, ],
        durations: 'SubmitTimeoffRequestDiffHoursDurations',
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        skipManagerApproval: typing.Union[MetaOapg.properties.skipManagerApproval, bool, schemas.Unset] = schemas.unset,
        approver: typing.Union[MetaOapg.properties.approver, str, schemas.Unset] = schemas.unset,
        reasonCode: typing.Union[MetaOapg.properties.reasonCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubmitTimeoffRequestDiffHours':
        return super().__new__(
            cls,
            *args,
            endDate=endDate,
            policyType=policyType,
            durations=durations,
            startDate=startDate,
            description=description,
            skipManagerApproval=skipManagerApproval,
            approver=approver,
            reasonCode=reasonCode,
            _configuration=_configuration,
            **kwargs,
        )

from hi_bob_python_sdk.model.submit_timeoff_request_diff_hours_durations import SubmitTimeoffRequestDiffHoursDurations
