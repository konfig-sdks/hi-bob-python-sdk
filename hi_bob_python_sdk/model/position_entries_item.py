# coding: utf-8

"""
    Bob API

    Access your employees data with the Bob API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hi_bob_python_sdk import schemas  # noqa: F401


class PositionEntriesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            position_fte = schemas.AnyTypeSchema
            position_effective_date = schemas.AnyTypeSchema
            position_employment_type = schemas.AnyTypeSchema
            position_status = schemas.AnyTypeSchema
            position_actual_start_date = schemas.AnyTypeSchema
            position_reason = schemas.AnyTypeSchema
            position_position_type = schemas.AnyTypeSchema
            position_filled_by = schemas.AnyTypeSchema
            position_job = schemas.AnyTypeSchema
            position_recruitment_status = schemas.AnyTypeSchema
            position_name = schemas.AnyTypeSchema
            position_department = schemas.AnyTypeSchema
            position_site = schemas.AnyTypeSchema
            position_expected_start_date = schemas.AnyTypeSchema
            position_manager_position_id = schemas.AnyTypeSchema
            position_manager_position_filled_by = schemas.AnyTypeSchema
            __annotations__ = {
                "/position/fte": position_fte,
                "/position/effectiveDate": position_effective_date,
                "/position/employmentType": position_employment_type,
                "/position/status": position_status,
                "/position/actualStartDate": position_actual_start_date,
                "/position/reason": position_reason,
                "/position/positionType": position_position_type,
                "/position/filledBy": position_filled_by,
                "/position/job": position_job,
                "/position/recruitmentStatus": position_recruitment_status,
                "/position/name": position_name,
                "/position/department": position_department,
                "/position/site": position_site,
                "/position/expectedStartDate": position_expected_start_date,
                "/position/managerPositionId": position_manager_position_id,
                "/position/managerPositionFilledBy": position_manager_position_filled_by,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/fte"]) -> MetaOapg.properties.position_fte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/effectiveDate"]) -> MetaOapg.properties.position_effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/employmentType"]) -> MetaOapg.properties.position_employment_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/status"]) -> MetaOapg.properties.position_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/actualStartDate"]) -> MetaOapg.properties.position_actual_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/reason"]) -> MetaOapg.properties.position_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/positionType"]) -> MetaOapg.properties.position_position_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/filledBy"]) -> MetaOapg.properties.position_filled_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/job"]) -> MetaOapg.properties.position_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/recruitmentStatus"]) -> MetaOapg.properties.position_recruitment_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/name"]) -> MetaOapg.properties.position_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/department"]) -> MetaOapg.properties.position_department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/site"]) -> MetaOapg.properties.position_site: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/expectedStartDate"]) -> MetaOapg.properties.position_expected_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/managerPositionId"]) -> MetaOapg.properties.position_manager_position_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["/position/managerPositionFilledBy"]) -> MetaOapg.properties.position_manager_position_filled_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["/position/fte", "/position/effectiveDate", "/position/employmentType", "/position/status", "/position/actualStartDate", "/position/reason", "/position/positionType", "/position/filledBy", "/position/job", "/position/recruitmentStatus", "/position/name", "/position/department", "/position/site", "/position/expectedStartDate", "/position/managerPositionId", "/position/managerPositionFilledBy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/fte"]) -> typing.Union[MetaOapg.properties.position_fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/effectiveDate"]) -> typing.Union[MetaOapg.properties.position_effective_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/employmentType"]) -> typing.Union[MetaOapg.properties.position_employment_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/status"]) -> typing.Union[MetaOapg.properties.position_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/actualStartDate"]) -> typing.Union[MetaOapg.properties.position_actual_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/reason"]) -> typing.Union[MetaOapg.properties.position_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/positionType"]) -> typing.Union[MetaOapg.properties.position_position_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/filledBy"]) -> typing.Union[MetaOapg.properties.position_filled_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/job"]) -> typing.Union[MetaOapg.properties.position_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/recruitmentStatus"]) -> typing.Union[MetaOapg.properties.position_recruitment_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/name"]) -> typing.Union[MetaOapg.properties.position_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/department"]) -> typing.Union[MetaOapg.properties.position_department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/site"]) -> typing.Union[MetaOapg.properties.position_site, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/expectedStartDate"]) -> typing.Union[MetaOapg.properties.position_expected_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/managerPositionId"]) -> typing.Union[MetaOapg.properties.position_manager_position_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["/position/managerPositionFilledBy"]) -> typing.Union[MetaOapg.properties.position_manager_position_filled_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["/position/fte", "/position/effectiveDate", "/position/employmentType", "/position/status", "/position/actualStartDate", "/position/reason", "/position/positionType", "/position/filledBy", "/position/job", "/position/recruitmentStatus", "/position/name", "/position/department", "/position/site", "/position/expectedStartDate", "/position/managerPositionId", "/position/managerPositionFilledBy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PositionEntriesItem':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
